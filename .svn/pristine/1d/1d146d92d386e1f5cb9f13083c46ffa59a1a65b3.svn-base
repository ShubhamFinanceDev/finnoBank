package com.kemal.spring.web.controllers.viewControllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.WebRequest;

import com.kemal.spring.domain.User;
import com.kemal.spring.service.BatchDetailsService;
import com.kemal.spring.service.UserService;
import com.kemal.spring.web.dto.DashboardDTO;
import com.kemal.spring.web.dto.UserDto;
import com.kemal.spring.web.dto.batchpagingDto;

/**
 * Created by Keno&Kemo on 30.09.2017..
 */

@Controller
@RequestMapping("")
public class IndexController {

	private final BatchDetailsService batchService;
	private final UserService userService;

	public IndexController(BatchDetailsService batchService, UserService userService) {
		this.batchService = batchService;
		this.userService = userService;
	}

	// @GetMapping(value = {"/", "/index"})
	@GetMapping(value = "/")
	public String index() {
		return "website/firstpage";
	}

	@GetMapping(value = "/login")
	public String login() {
		return "website/login";
	}

	@GetMapping(value = "/dashboard")
	public String dashboard(WebRequest request, Model model) {

		// model.addAttribute("batchdetails", batchService.findApplicationBybatchid());
		List<batchpagingDto> list = new ArrayList<>();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		String name = auth.getName(); // get logged in username

		User user = userService.findByUsername(name);
		if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_ADMIN")||user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_COLLECTION")) {
			list = (batchService.findApplicationBybatchid(null));
		} else {
			list = (batchService.findApplicationBybatchid(user.getId()));
		}

		DashboardDTO dashboardDTO = new DashboardDTO();

		if (list != null && list.size() > 0) {

			int total = 0, pending = 0, closed = 0;

			// total=list.size();
			for (batchpagingDto batch : list) {

				if (batch.getBatchnumber() != null) {
					if (batch.getUserstatus().equalsIgnoreCase("created")) {

						pending++;
					} else {
						closed++;
					}
					total++;
				}

			}
			dashboardDTO.setClosed(closed);
			dashboardDTO.setPending(pending);
			dashboardDTO.setTotal(total);
		}
		model.addAttribute("dashboard", dashboardDTO);
		model.addAttribute("batchdetails", list);
		return "website/dashboard";
	}

	@GetMapping(value = "/register")
	public String showRegistrationForm(WebRequest request, Model model) {
		UserDto userDto = new UserDto();
		model.addAttribute("userDto", userDto);
		return "website/register";
	}
}
