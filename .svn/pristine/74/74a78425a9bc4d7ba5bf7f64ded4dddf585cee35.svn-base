package com.kemal.spring.web.controllers.viewControllers;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.kemal.spring.domain.SurveyCustomer;
import com.kemal.spring.domain.User;
import com.kemal.spring.service.CustomerSurveryService;
import com.kemal.spring.service.EmailService;
import com.kemal.spring.service.UserService;
import com.kemal.spring.web.dto.UserDto;

/**
 * Created by Keno&Kemo on 17.11.2017..
 */
@Controller
@RequestMapping("")
public class RegisterController {
	private UserService userService;
	private EmailService emailService;
	private CustomerSurveryService customerSurveryService;

	public RegisterController(UserService userService, EmailService emailService,
			CustomerSurveryService customerSurveryService) {
		this.userService = userService;
		this.emailService = emailService;
		this.customerSurveryService=customerSurveryService;
	}

	@GetMapping("/submit-survey/{id}")
	public ModelAndView deletefetchdata(@PathVariable Integer id, ModelAndView modelAndView,Model model,
			HttpServletRequest request)
	{

		System.out.println(id);
		modelAndView.setViewName("website/customersurvey");
		SurveyCustomer customer=customerSurveryService.findCustomerById(id);
		model.addAttribute("customer", customer);
		return modelAndView;
	}

	@PostMapping(value = "/submit-registration")
	public ModelAndView saveUser(ModelAndView modelAndView, @ModelAttribute("userDto") @Valid final UserDto userDto,
			BindingResult bindingResult, HttpServletRequest request, Errors errors) {

		User emailExists = userService.findByEmail(userDto.getEmail());
		User userNameExists = userService.findByUsername(userDto.getUsername());

		System.out.println(emailExists);

		if (emailExists != null) {
			modelAndView.setViewName("website/register");
			bindingResult.rejectValue("email", "emailAlreadyExists");
		}

		if (userNameExists != null) {
			modelAndView.setViewName("website/register");
			bindingResult.rejectValue("username", "usernameAlreadyExists");
		}

		if (bindingResult.hasErrors()) {
			modelAndView.setViewName("website/register");
		} else { // new user so we create user and send confirmation e-mail

			User user = userService.createNewAccount(userDto);
			// Disable user until they click on confirmation link in email

			user.setEnabled(true);
			userService.save(user);

			/*
			 * String appUrl = request.getScheme() + "://" + request.getServerName();
			 * 
			 * SimpleMailMessage registrationEmail = new SimpleMailMessage();
			 * registrationEmail.setTo(user.getEmail());
			 * registrationEmail.setSubject("Registration Confirmation");
			 * registrationEmail.setText("Please confirm the registration");
			 * registrationEmail.setFrom("email@email.com");
			 * 
			 * emailService.sendEmail(registrationEmail);
			 */

			modelAndView.addObject("confirmationMessage",
					"A confirmation e-mail has been sent to " + userDto.getEmail());
			modelAndView.setViewName("website/registered");
		}

		return modelAndView;
	}
}
