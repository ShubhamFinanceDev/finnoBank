package com.kemal.spring.web.controllers.viewControllers;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.kemal.spring.domain.Activity;
import com.kemal.spring.domain.SudDiStatus;
import com.kemal.spring.domain.SudDocketStatus;
import com.kemal.spring.domain.SudDpaStatus;
import com.kemal.spring.domain.SudFinalStatus;
import com.kemal.spring.domain.SudLegalStatus;
import com.kemal.spring.domain.SudMonitoring;
import com.kemal.spring.domain.SudTechnicalStatus;
import com.kemal.spring.domain.SurveyCustomer;
import com.kemal.spring.domain.User;
import com.kemal.spring.service.ActivityDetailsService;
import com.kemal.spring.service.BatchDetailsService;
import com.kemal.spring.service.CustomerSurveryService;
//import com.kemal.spring.service.CustomerSurveyService;
import com.kemal.spring.service.SudMonitoringService;
import com.kemal.spring.service.UserService;
import com.kemal.spring.web.dto.DashboardDTO;
import com.kemal.spring.web.dto.SudMonitoringDto;
import com.kemal.spring.web.dto.SurveryDataUpload;
import com.kemal.spring.web.dto.UserDto;
import com.kemal.spring.web.dto.batchpagingDto;
import com.poiji.bind.Poiji;

/**
 * Created by Keno&Kemo on 30.09.2017..
 */

@Controller
@RequestMapping("")
public class IndexController {

	private final BatchDetailsService batchService;
	private final UserService userService;
	private final SudMonitoringService sudMonitoringService;
	private final CustomerSurveryService customerSurveryService;
	private final ActivityDetailsService activityService;

	public IndexController(BatchDetailsService batchService, UserService userService,
			SudMonitoringService sudMonitoringService, CustomerSurveryService customerSurveryService,
			ActivityDetailsService activityService) {

		this.batchService = batchService;
		this.userService = userService;
		this.sudMonitoringService = sudMonitoringService;
		this.customerSurveryService = customerSurveryService;
		this.activityService = activityService;
	}

	// @GetMapping(value = {"/", "/index"})
	@GetMapping(value = "/")
	public String index() {

		Activity activity = new Activity();
		activity.setType("HIT");
		// activity.setUser(users);
		activity.setCreateon(new Date());
		activity.setDescription("Access Home Page");
		activityService.save(activity);

		return "website/firstpage";
	}

	@GetMapping(value = "/login")
	public String login() {
		return "website/login";
	}

	@GetMapping(value = "/dashboard")
	public String dashboard(WebRequest request, Model model) {

		// model.addAttribute("batchdetails", batchService.findApplicationBybatchid());
		List<batchpagingDto> list = new ArrayList<>();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		String name = auth.getName(); // get logged in username

		User user = userService.findByUsername(name);
		Activity activity = new Activity();
		activity.setType("LOGIN");
		activity.setUser(user);
		activity.setCreateon(new Date());
		activity.setDescription("User Login Successfully");
		activityService.save(activity);
		if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_ADMIN")
				|| user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_COLLECTION")) {
			list = (batchService.findApplicationBybatchid(null));
			DashboardDTO dashboardDTO = new DashboardDTO();

			if (list != null && list.size() > 0) {

				int total = 0, pending = 0, closed = 0;

				// total=list.size();
				for (batchpagingDto batch : list) {

					if (batch.getBatchnumber() != null) {
						if (batch.getUserstatus().equalsIgnoreCase("created")) {

							pending++;
						} else {
							closed++;
						}
						total++;
					}

				}
				dashboardDTO.setClosed(closed);
				dashboardDTO.setPending(pending);
				dashboardDTO.setTotal(total);
			}
			model.addAttribute("dashboard", dashboardDTO);
			model.addAttribute("batchdetails", list);
			return "website/dashboard";
		} else if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_USER")) {
			list = (batchService.findApplicationBybatchid(user.getId()));
			DashboardDTO dashboardDTO = new DashboardDTO();

			if (list != null && list.size() > 0) {

				int total = 0, pending = 0, closed = 0;

				// total=list.size();
				for (batchpagingDto batch : list) {

					if (batch.getBatchnumber() != null) {
						if (batch.getUserstatus().equalsIgnoreCase("created")) {

							pending++;
						} else {
							closed++;
						}
						total++;
					}

				}
				dashboardDTO.setClosed(closed);
				dashboardDTO.setPending(pending);
				dashboardDTO.setTotal(total);
			}
			model.addAttribute("dashboard", dashboardDTO);
			model.addAttribute("batchdetails", list);
			return "website/dashboard";
		} else if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_SUD_USER")) {
			model.addAttribute("sudMonitoringDto", new SudMonitoringDto());
			model.addAttribute("batchdetails", sudMonitoringService.findSudMonitoringList());
			// master data population

			model.addAttribute("dilist", sudMonitoringService.findSudDiStatusList());
			model.addAttribute("docketlist", sudMonitoringService.findSudDocketStatusList());
			model.addAttribute("finallist", sudMonitoringService.findSudFinalStatusList());
			model.addAttribute("leagallist", sudMonitoringService.findSudLegalStatusList());
			model.addAttribute("palist", sudMonitoringService.findSudPaStatusList());
			model.addAttribute("technicallist", sudMonitoringService.findSudTechnicalStatusList());

			return "website/suddashboard";
		} else if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_SUD_ADMIN")) {
			model.addAttribute("sudMonitoringDto", new SudMonitoringDto());
			model.addAttribute("batchdetails", sudMonitoringService.findSudMonitoringList());
			return "website/suddashboard";
		} else if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_SURVEY_ADMIN")) {
			model.addAttribute("batchdetails", customerSurveryService.findSurveyCustomerList());
			return "website/surveydashboard";
		} else if (user.getRoles().get(0).getName().equalsIgnoreCase("ROLE_SURVEY_USER")) {
			model.addAttribute("batchdetails", customerSurveryService.findSurveyCustomerList());
			return "website/surveydashboard";
		}

		return "website/dashboard";
	}

	@PostMapping("/savesudmonitoring")
	public String add(ModelAndView modelAndView, @ModelAttribute("sudMonitoringDto") SudMonitoringDto sudMonitoringDto,
			BindingResult bindingResult, HttpServletRequest request, Errors errors) {

		SudMonitoring suddb = sudMonitoringService.findbySudMonitoringId(sudMonitoringDto.getId());

		suddb.setDidateifdoable(sudMonitoringDto.getDidateifdoable());

		SudDiStatus distatus = new SudDiStatus();
		distatus.setId(sudMonitoringDto.getDistatus());
		suddb.setDistatus(distatus);

		SudLegalStatus loginstatus = new SudLegalStatus();
		loginstatus.setId(sudMonitoringDto.getLegalstatus());
		suddb.setLegalstatus(loginstatus);

		SudTechnicalStatus technicalstatus = new SudTechnicalStatus();
		technicalstatus.setId(sudMonitoringDto.getTechnicalstatus());
		suddb.setTechnicalstatus(technicalstatus);

		SudDpaStatus dpstatus = new SudDpaStatus();
		dpstatus.setId(sudMonitoringDto.getPastatus());
		suddb.setPastatus(dpstatus);

		SudDocketStatus docketstatus = new SudDocketStatus();
		docketstatus.setId(sudMonitoringDto.getDocketstatus());
		suddb.setDocketstatus(docketstatus);

		SudFinalStatus finalstatus = new SudFinalStatus();
		finalstatus.setId(sudMonitoringDto.getFinalstatus());
		suddb.setFinalstatus(finalstatus);

		suddb.setAdditionalremarks(sudMonitoringDto.getAdditionalremarks());
		sudMonitoringService.saveMonitoring(suddb);

		return "redirect:/dashboard";
	}

	// GET Method to upload data
	@GetMapping(value = "/uploadcustomer")
	public ModelAndView UploadBulkData(HttpServletRequest request) {

		request.getSession().setAttribute("uploadbulkDatalist", null);

		ModelAndView modelAndView = new ModelAndView("website/surverycustomerupload");

		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		modelAndView.addObject("surveryDataUpload", new SurveryDataUpload());
		return modelAndView;

	}

	// Post Method to view upload data
	@PostMapping(value = "/validateuploadcustomer")
	public ModelAndView validateUploadBulkData(@RequestParam("file") MultipartFile file, HttpServletRequest request)
			throws IllegalStateException, IOException {
		ModelAndView modelAndView = new ModelAndView("website/surverycustomerupload");

		Authentication auth = SecurityContextHolder.getContext().getAuthentication();

		File convFile = new File(System.getProperty("java.io.tmpdir") + "/" + file.getOriginalFilename());

		file.transferTo(convFile);

		List<SurveryDataUpload> invoices = Poiji.fromExcel(convFile, SurveryDataUpload.class);
		System.out.println("Printing List Data: " + invoices);

		modelAndView.addObject("uploadbulkDatalist", invoices);
		request.getSession().setAttribute("uploadbulkDatalist", invoices);
		return modelAndView;
	}

	// Save Method to upload data
	@PostMapping(value = "/saveuploadcustomer")
	public String saveUploadBulkData(@RequestParam("file") MultipartFile file, HttpServletRequest request) {

		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		List<SurveryDataUpload> invoices = (List<SurveryDataUpload>) request.getSession()
				.getAttribute("uploadbulkDatalist");
		System.out.println("Printing List Data: " + invoices);
		for (SurveryDataUpload excel : invoices) {

			SurveyCustomer invoice = new SurveyCustomer();

			invoice = customerSurveryService.findCustomerByApplication(excel.getApplicationnumber());
			if (invoice == null) {
				invoice = new SurveyCustomer();
			}
			invoice.setApplicationnumber(excel.getApplicationnumber());
			invoice.setApplicantname(excel.getApplicantname());
			invoice.setMobileno(excel.getMobileno());
			invoice.setEmailid(excel.getEmailid());
			invoice.setCreateon(new Date());

			customerSurveryService.save(invoice);

		}
		return "website/surverycustomerupload";

	}

	@GetMapping(value = "/register")
	public String showRegistrationForm(WebRequest request, Model model) {
		UserDto userDto = new UserDto();
		model.addAttribute("userDto", userDto);
		return "website/register";
	}
}
